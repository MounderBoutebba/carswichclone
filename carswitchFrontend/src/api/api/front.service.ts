/**
 * SwitchCar API
 * SwitchCar API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@algebratec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { AllCarsResponse } from '../model/allCarsResponse';
import { Car } from '../model/car';
import { InlineResponse400 } from '../model/inlineResponse400';
import { LoggedIn } from '../model/loggedIn';
import { Login } from '../model/login';
import { RegisterResponse } from '../model/registerResponse';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class FrontService {
  protected basePath = 'http://localhost/carswitch/public/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * return all cars
   *
   * @param search Search lists of cars by name
   * @param priceMin Get lists of cars by (min) price
   * @param priceMax Get lists of cars by (max) price
   * @param color Get lists of cars by color
   * @param marque Get lists of cars by marque
   * @param model Get lists of cars by model
   * @param yearStart Get lists of cars by start year
   * @param yearEnd Get lists of cars by end year
   * @param region Get lists of cars by region ID
   * @param wilaya Get lists of cars by wilaya ID
   * @param mileageStart Get lists of cars by mileage start number
   * @param mileageEnd Get lists of cars by mileage end number
   * @param body Get lists of cars by bodys type
   * @param documentType Get lists of cars by documents type
   * @param transmition Get lists of cars by transmistion type
   * @param energy Get lists of cars by enrgy type
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allCarsFront(
    search?: string,
    priceMin?: number,
    priceMax?: number,
    color?: number,
    marque?: string,
    model?: string,
    yearStart?: number,
    yearEnd?: number,
    region?: number,
    wilaya?: number,
    mileageStart?: number,
    mileageEnd?: number,
    body?: string,
    documentType?: string,
    transmition?: string,
    energy?: string,
    page?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllCarsResponse>;
  public allCarsFront(
    search?: string,
    priceMin?: number,
    priceMax?: number,
    color?: number,
    marque?: string,
    model?: string,
    yearStart?: number,
    yearEnd?: number,
    region?: number,
    wilaya?: number,
    mileageStart?: number,
    mileageEnd?: number,
    body?: string,
    documentType?: string,
    transmition?: string,
    energy?: string,
    page?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllCarsResponse>>;
  public allCarsFront(
    search?: string,
    priceMin?: number,
    priceMax?: number,
    color?: number,
    marque?: string,
    model?: string,
    yearStart?: number,
    yearEnd?: number,
    region?: number,
    wilaya?: number,
    mileageStart?: number,
    mileageEnd?: number,
    body?: string,
    documentType?: string,
    transmition?: string,
    energy?: string,
    page?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllCarsResponse>>;
  public allCarsFront(
    search?: string,
    priceMin?: number,
    priceMax?: number,
    color?: number,
    marque?: string,
    model?: string,
    yearStart?: number,
    yearEnd?: number,
    region?: number,
    wilaya?: number,
    mileageStart?: number,
    mileageEnd?: number,
    body?: string,
    documentType?: string,
    transmistion?: string,
    energy?: string,
    page?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (search !== undefined && search !== null) {
      queryParameters = queryParameters.set('search', <any>search);
    }
    if (priceMin !== undefined && priceMin !== null) {
      queryParameters = queryParameters.set('price_min', <any>priceMin);
    }
    if (priceMax !== undefined && priceMax !== null) {
      queryParameters = queryParameters.set('price_max', <any>priceMax);
    }
    if (color !== undefined && color !== null) {
      queryParameters = queryParameters.set('color', <any>color);
    }
    if (marque !== undefined && marque !== null) {
      queryParameters = queryParameters.set('marque', <any>marque);
    }
    if (model !== undefined && model !== null) {
      queryParameters = queryParameters.set('model', <any>model);
    }
    if (yearStart !== undefined && yearStart !== null) {
      queryParameters = queryParameters.set('year_start', <any>yearStart);
    }
    if (yearEnd !== undefined && yearEnd !== null) {
      queryParameters = queryParameters.set('year_end', <any>yearEnd);
    }
    if (region !== undefined && region !== null) {
      queryParameters = queryParameters.set('region', <any>region);
    }
    if (wilaya !== undefined && wilaya !== null) {
      queryParameters = queryParameters.set('wilaya', <any>wilaya);
    }
    if (mileageStart !== undefined && mileageStart !== null) {
      queryParameters = queryParameters.set('mileage_start', <any>mileageStart);
    }
    if (mileageEnd !== undefined && mileageEnd !== null) {
      queryParameters = queryParameters.set('mileage_end', <any>mileageEnd);
    }
    if (body !== undefined && body !== null) {
      queryParameters = queryParameters.set('body', <any>body);
    }
    if (documentType !== undefined && documentType !== null) {
      queryParameters = queryParameters.set('document_type', <any>documentType);
    }
    if (transmistion !== undefined && transmistion !== null) {
      queryParameters = queryParameters.set('transmistion', <any>transmistion);
    }
    if (energy !== undefined && energy !== null) {
      queryParameters = queryParameters.set('energy', <any>energy);
    }
    if (page !== undefined && page !== null) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AllCarsResponse>(
      'get',
      `${this.basePath}/front/cars`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Create a new car
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createCarFront(
    body?: Car,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Car>;
  public createCarFront(
    body?: Car,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Car>>;
  public createCarFront(
    body?: Car,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Car>>;
  public createCarFront(
    body?: Car,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Car>(
      'post',
      `${this.basePath}/front/car/create`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete a specifique Car by id
   *
   * @param carId The ID of a specifique car
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteCarFront(
    carId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public deleteCarFront(
    carId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public deleteCarFront(
    carId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public deleteCarFront(
    carId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (carId === null || carId === undefined) {
      throw new Error(
        'Required parameter carId was null or undefined when calling deleteCarFront.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>(
      'delete',
      `${this.basePath}/front/car/${encodeURIComponent(String(carId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Edit a specifique Car by id
   *
   * @param carId The ID of a specifique car
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public editCarFront(
    carId: number,
    body?: Car,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Car>;
  public editCarFront(
    carId: number,
    body?: Car,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Car>>;
  public editCarFront(
    carId: number,
    body?: Car,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Car>>;
  public editCarFront(
    carId: number,
    body?: Car,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (carId === null || carId === undefined) {
      throw new Error(
        'Required parameter carId was null or undefined when calling editCarFront.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Car>(
      'put',
      `${this.basePath}/front/car/${encodeURIComponent(String(carId))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get detaille of a specifique car by id
   *
   * @param carId The ID of a specifique car
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCarByIdFront(
    carId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Car>;
  public getCarByIdFront(
    carId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Car>>;
  public getCarByIdFront(
    carId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Car>>;
  public getCarByIdFront(
    carId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (carId === null || carId === undefined) {
      throw new Error(
        'Required parameter carId was null or undefined when calling getCarByIdFront.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Car>(
      'get',
      `${this.basePath}/front/car/${encodeURIComponent(String(carId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Login user
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public login(
    body?: Login,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<LoggedIn>;
  public login(
    body?: Login,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<LoggedIn>>;
  public login(
    body?: Login,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<LoggedIn>>;
  public login(
    body?: Login,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<LoggedIn>('post', `${this.basePath}/login`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Create new user
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public register(
    body: User,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<RegisterResponse>;
  public register(
    body: User,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<RegisterResponse>>;
  public register(
    body: User,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<RegisterResponse>>;
  public register(
    body: User,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling register.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<RegisterResponse>(
      'post',
      `${this.basePath}/register`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * User like or dislike a specifique car by ID
   *
   * @param body
   * @param carId The ID of a specifique car
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userLikeCar(
    body: Car,
    carId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public userLikeCar(
    body: Car,
    carId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public userLikeCar(
    body: Car,
    carId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public userLikeCar(
    body: Car,
    carId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling userLikeCar.'
      );
    }

    if (carId === null || carId === undefined) {
      throw new Error(
        'Required parameter carId was null or undefined when calling userLikeCar.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<any>(
      'post',
      `${this.basePath}/front/car/like`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
