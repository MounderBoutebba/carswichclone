/**
 * SwitchCar API
 * SwitchCar API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@algebratec.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { AllBackOfficeUserResponse } from '../model/allBackOfficeUserResponse';
import { DefaultResponse } from '../model/defaultResponse';
import { OneBackOfficeUserResponse } from '../model/oneBackOfficeUserResponse';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class BackOfficeUserService {
  protected basePath = 'http://localhost/carswitch/public/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Return all staffs
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allBackOfficeUsers(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllBackOfficeUserResponse>;
  public allBackOfficeUsers(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllBackOfficeUserResponse>>;
  public allBackOfficeUsers(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllBackOfficeUserResponse>>;
  public allBackOfficeUsers(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AllBackOfficeUserResponse>(
      'get',
      `${this.basePath}/backOfficeUsers`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Create a new user
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createBackOfficeUser(
    body?: User,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<OneBackOfficeUserResponse>;
  public createBackOfficeUser(
    body?: User,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<OneBackOfficeUserResponse>>;
  public createBackOfficeUser(
    body?: User,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<OneBackOfficeUserResponse>>;
  public createBackOfficeUser(
    body?: User,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<OneBackOfficeUserResponse>(
      'post',
      `${this.basePath}/backOfficeUser/create`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete a specifique User by id
   *
   * @param backOfficeUserId The ID of a specifique staff
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteBackOfficeUser(
    backOfficeUserId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DefaultResponse>;
  public deleteBackOfficeUser(
    backOfficeUserId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DefaultResponse>>;
  public deleteBackOfficeUser(
    backOfficeUserId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DefaultResponse>>;
  public deleteBackOfficeUser(
    backOfficeUserId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (backOfficeUserId === null || backOfficeUserId === undefined) {
      throw new Error(
        'Required parameter backOfficeUserId was null or undefined when calling deleteBackOfficeUser.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DefaultResponse>(
      'delete',
      `${this.basePath}/backOfficeUser/${encodeURIComponent(
        String(backOfficeUserId)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Edit a specifique staff by ID
   *
   * @param backOfficeUserId The ID of a specifique staff
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public editBackOfficeUser(
    backOfficeUserId: number,
    body?: User,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<OneBackOfficeUserResponse>;
  public editBackOfficeUser(
    backOfficeUserId: number,
    body?: User,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<OneBackOfficeUserResponse>>;
  public editBackOfficeUser(
    backOfficeUserId: number,
    body?: User,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<OneBackOfficeUserResponse>>;
  public editBackOfficeUser(
    backOfficeUserId: number,
    body?: User,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (backOfficeUserId === null || backOfficeUserId === undefined) {
      throw new Error(
        'Required parameter backOfficeUserId was null or undefined when calling editBackOfficeUser.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<OneBackOfficeUserResponse>(
      'put',
      `${this.basePath}/backOfficeUser/${encodeURIComponent(
        String(backOfficeUserId)
      )}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get detaille of a specifique staff by ID
   *
   * @param backOfficeUserId The ID of a specifique staff
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getBackOfficeUserById(
    backOfficeUserId: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<OneBackOfficeUserResponse>;
  public getBackOfficeUserById(
    backOfficeUserId: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<OneBackOfficeUserResponse>>;
  public getBackOfficeUserById(
    backOfficeUserId: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<OneBackOfficeUserResponse>>;
  public getBackOfficeUserById(
    backOfficeUserId: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (backOfficeUserId === null || backOfficeUserId === undefined) {
      throw new Error(
        'Required parameter backOfficeUserId was null or undefined when calling getBackOfficeUserById.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<OneBackOfficeUserResponse>(
      'get',
      `${this.basePath}/backOfficeUser/${encodeURIComponent(
        String(backOfficeUserId)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * logout current staff
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public staffLogout(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DefaultResponse>;
  public staffLogout(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DefaultResponse>>;
  public staffLogout(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DefaultResponse>>;
  public staffLogout(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DefaultResponse>(
      'post',
      `${this.basePath}/admin/logout`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
